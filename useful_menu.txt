removeHook("toe")

function toes()
ImGui.Begin("KETUAKULI")
ImGui.Text("Command's")

if ImGui.Button("Turn ON Command /fossil") then-- remove the hook incase you execute again/are testing
removeHook("fossilFinder")
sleep(250)

function hook(packet, type)
    if packet:find("action|input\n|text|/fossil") then
        local count = 0 -- set count to 0
        local fossilpos = {}
        for _, tile in ipairs(getTiles()) do -- for each tile in the world
            if tile.fg == 3918 then -- check if tile is 3918 (fossil rock)
                table.insert(fossilpos, tile.pos)
                count = count + 1 -- add 1 to the count
            end
        end
        
        log("Found "..count.." fossils in total at this world!")
        if count > 0 then
            for i = 1, count do
                log(i..": X: "..fossilpos[i].x.." Y: "..fossilpos[i].y)
            end
        end
        return true
    end
end
addHook("Packet", "fossilFinder", hook) -- add the hook..
end

if ImGui.Button("Turn OFF /fossil") then
removeHook("fossilFinder")
end


ImGui.Text("WARP")

if ImGui.Button("Turn ON Command /warp") then
function hook(packet, type)
if packet:find("action|input") then
text = packet:gsub("action|input\n|text|", "")
if text:find("/") then
cmd = text:gsub("/", "")
if cmd:find("warp ") then
world = cmd:gsub("warp ", "")
log("`$Loading to world`5 "..world.."`$...")
sendPacket(false, "action|join_request\nname|"..world, 3)
return true
end
end
end
end

addHook("Packet", "warphook", hook)
end

if ImGui.Button("Turn OFF /warp") then
removeHook("warphook")
end

ImGui.Text("DROP")

if ImGui.Button("Turn ON Fast Drop") then
function hook2(varlist)
if varlist[0]:find("OnDialogRequest") and varlist[1]:find("end_dialog|drop_item") then
pkt = string.format([[action|dialog_return
dialog_name|drop_item
itemID|%d|
count|%d
]], varlist[1]:match("itemID|(%d+)"), varlist[1]:match("count||(%d+)"))

sendPacket(false, pkt, 2)
return true
end
end

addHook("OnVarlist", "fastdrop", hook2)
end

if ImGui.Button("Turn OFF Fast Drop") then
removeHook("trashdrop")
end

ImGui.Text("OFF")

if ImGui.Button("Unhook all") then
removeHooks()
end

if ImGui.Button("Unhook Menu") then
removeHook("toe")
end
ImGui.Text("GROWSCAN")
 if ImGui.Button("placed items") then
function round(n)
    return n % 1 >= 0.5 and math.ceil(n) or math.floor(n)
end

store1 = {}

for k,v in pairs(getTiles()) do
    id = v.fg
    if store1[v.fg] == nil then
        store1[v.fg] = {id = v.fg, qty = 1}
    else
        store1[v.fg].qty = store1[v.fg].qty + 1
    end
    if store1[v.bg] == nil then
        store1[v.bg] = {id = v.bg, qty = 1}
    else
        store1[v.bg].qty = store1[v.bg].qty + 1
    end
end

placedshit = "add_spacer|small|"
for _,tile in pairs(store1) do
    count = round(tile.qty)
    placedshit =
        placedshit ..
        "\nadd_label_with_icon|small|`o: " ..
            getItemInfo(tile.id).name .. " : " .. count .. "``|left|" .. tostring(tile.id)
end

varlist = {}
varlist[0] = "OnDialogRequest"
varlist[1] = "set_default_color|`o\nadd_label_with_icon|big|growscan``|left|6016\n"..placedshit.."\nadd_quick_exit"
sendVarlist(varlist)
end

 if ImGui.Button("floating items") then
function round(n)
    return n % 1 >= 0.5 and math.ceil(n) or math.floor(n)
end

store1 = {}

for k, v in pairs(getObjects()) do
    id = v.id
    if store1[v.id] == nil then
        store1[v.id] = {id = v.id, qty = v.count}
    else
        store1[v.id].qty = store1[v.id].qty + v.count
    end
end

droppedshit = "add_spacer|small|"
for _, object in pairs(store1) do
    count = round(object.qty)
    droppedshit =
        droppedshit ..
        "\nadd_label_with_icon|small|`o: " ..
            getItemInfo(object.id).name .. " : " .. count .. "``|left|" .. tostring(object.id)
end

varlist = {}
varlist[0] = "OnDialogRequest"
varlist[1] = "set_default_color|`o\nadd_label_with_icon|big|growscan``|left|6016\n" .. droppedshit .. "\nadd_quick_exit"

sendVarlist(varlist)
end

ImGui.End()
end
addHook("Render", "toe", toes)


